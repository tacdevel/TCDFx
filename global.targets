<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~ FileName:             global.targets
~ Copyright/License:    https://github.com/tom-corwin/tacdevlibs/blob/master/LICENSE.md
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<Project ToolsVersion="16.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Package Versioning ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <PropertyGroup>
    <_VersionBase>0.1.0</_VersionBase>
  </PropertyGroup>

  <UsingTask TaskName="BuildVersionGenerator" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <IsAutoBuild ParameterType="System.Boolean" Required="true" />
      <VersionInput ParameterType="System.String" Required="true" />
      <DotGitPath ParameterType="System.String" Required="true" />
      <BuildVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          string timestamp = DateTime.Now.ToString("yyMMdd");
          string[] gitFetchHead = File.ReadAllLines(Path.Combine(DotGitPath, "FETCH_HEAD"));
          string commitID = gitFetchHead[0].Substring(0, 7);
          if (!IsAutoBuild)
              BuildVersion = $"{VersionInput}-local-{timestamp}-{commitID}";
          else
          {
              if (gitFetchHead[0].Contains(@"branch 'release/v"))
                  BuildVersion = $"{VersionInput}+{timestamp}-{commitID}";
              else if (gitFetchHead[0].Contains(@"branch 'pull/"))
              {
                  string pullNumberStr = gitFetchHead[0].Remove(0, 40).TrimStart('\t').Remove(0, 13);
                  int pullNumber = int.Parse(pullNumberStr.Substring(0, pullNumberStr.IndexOf('/')));
                  BuildVersion = $"{VersionInput}-build-{timestamp}-{commitID}-pr{pullNumber}";
              }
              else
                  BuildVersion = $"{VersionInput}-build-{timestamp}-{commitID}";
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="GenerateBuildVersion">
    <BuildVersionGenerator IsAutoBuild="$(_IsAutoBuild)" DotGitPath="$(TACDevLibsRepoPath).git" VersionInput="$(_VersionBase)">
      <Output TaskParameter="BuildVersion" PropertyName="GeneratedBuildVersion"  />
    </BuildVersionGenerator>
    <Message Text="Old Version: '$(Version)'" Importance="High" />
    <PropertyGroup>
      <Version>$(GeneratedBuildVersion)</Version>
    </PropertyGroup>
    <PropertyGroup Condition="'$(Configuration)' == 'Release'">
      <PackageVersion>$(GeneratedBuildVersion)</PackageVersion>
    </PropertyGroup>
    <Message Text="New Version: '$(Version)'" Importance="High" />
  </Target>

  <!-- Default Items ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

  <PropertyGroup>
    <EnableDefaultItems>false</EnableDefaultItems>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="src\**\*.cs" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="res\Strings.resx" Condition="Exists('res\Strings.resx')">
      <LogicalName>$(MSBuildProjectName).Resources.Strings</LogicalName>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <Content Condition="Exists('$(TACDevLibsRepoPath)LICENSE.md')" Include="$(TACDevLibsRepoPath)LICENSE.md">
      <CopyToOutputDirectory>true</CopyToOutputDirectory>
      <Visible>false</Visible>
    </Content>
  </ItemGroup>

  <!-- Code Analysis ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

  <PropertyGroup Condition="'$(TACDevLibsProjectCategory)' != 'examples'">
    <RunCodeAnalysis>false</RunCodeAnalysis>
  </PropertyGroup>
  <ItemGroup Condition="'$(TACDevLibsProjectCategory)' != 'examples'">
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="2.9.8">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.NetCore.Analyzers" Version="2.9.8">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.CodeQuality.Analyzers" Version="2.9.8">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>

</Project>